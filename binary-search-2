 Search in Rotated Sorted Array
......................................

You are given an integer array nums sorted in ascending order, and an integer target.
Suppose that nums is rotated at some pivot unknown to you beforehand 
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
If target is found in the array return its index, otherwise, return -1.




Solution
............


A. Brute Force Solution
.........................

Using linear search to find the target element.
 Time Complexity -  O(n)


B. Optimized Solution
.......................

Since the array is sorted we will use binary search.
Now since the array is sorted and rotated, there must be a strictly increasing side
on dividing the list into two parts using mid.
Now we will check if the target element falls under the increasing list then we will do
required updations .
and if the target element is not found we will return -1.

Time Complexity - O(logn)


Code
........

 int search(vector<int>& nums, int target) {
        int n= nums.size();
        int l=0, r= nums.size()-1;
        while(l<=r){
            int mid= (l+r)>>1;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>=nums[l]){
                if(target<=nums[mid] && target>=nums[l])
                    r=mid-1;
                else
                    l=mid+1;
            }
            else{
                if(target>=nums[mid] && target<=nums[r])
                    l=mid+1;
                else
                    r=mid-1;
            }
            
        }
        return -1;
    }



Modified Question
...................


Search in Rotated Sorted Array II
...................................

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
You are given a target value to search. If found in the array return true, otherwise return false.



Solution
............
Same as the previous problem , only modification is to handle the duplicate elements.

Code
.......

 bool search(vector<int>& nums, int target) {
      
        int n= nums.size();
        int l=0, h=n-1;
        while(l<=h){
            int mid= (l+h)>>1;
            if(nums[mid]== target)
                return true;
            
             if((nums[l]==nums[mid]) && (nums[mid]==nums[h])){
                l++;
                h--;
              }
                
            else if(nums[mid]>=nums[l]){
                if(target>=nums[l] && target<=nums[mid])
                    h=mid-1;
                else
                    l=mid+1;
            }
            else{
                if(target>=nums[mid] && target<=nums[h])
                    l=mid+1;
                else
                    h=mid-1;
            }
        }
        return false;
    }





