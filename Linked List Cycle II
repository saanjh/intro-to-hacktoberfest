Given a linked list, return the node where the cycle begins. 
If there is no cycle, return null.
There is a cycle in a linked list if there is some node in the list that can be reached 
again by continuously following the next pointer. Internally, pos is used to denote the 
index of the node that tail's next pointer is connected to. Note that pos is 
not passed as a parameter.
Notice that you should not modify the linked list.
Follow up:
Can you solve it using O(1) (i.e. constant) memory?

Example
.........
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.



Solution
.........

The intuition is to use the slow and fast pointer approach, run the slow pointer one step at
a time and the fast pointer by two step, once they become equal, update the fast pointer once 
again to head.
And update the slow and fast pointer one step at a time. After the 

Code
......

ListNode *detectCycle(ListNode *head) {
        ListNode *p=head, *q=head;
        if(head==NULL)
            return NULL;
        do{
            p=p->next;
            q=(q && q->next)?q->next->next:NULL;
          }
        while(p!=q);
        if(p==NULL || q==NULL)
            return NULL;
         q=head;
        while(p!=q){
            p=p->next;
            q=q->next;
          }
          return p;  
        }





