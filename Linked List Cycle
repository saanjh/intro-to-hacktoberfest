Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be 
reached again by continuously following the next pointer. Internally, pos is used to 
denote the index of the node that tail's next pointer is connected to. Note that pos 
is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.

Follow up:
Can you solve it using O(1) (i.e. constant) memory?

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list,
where the tail connects to the 1st node (0-indexed).



Solution
............

Here we follow in slow and fast pointer approach.
we will take two pointers p and q pointing to head, now we will run a loop until p !=null,
then update p=p->next.
Similarly for q we will check if(q->next and q->next->next) is true then we will update 
q= q->next->next.
else return false
Now, if(p==q ) return true
At the end return false.

Code
.....

 bool hasCycle(ListNode *head) {
       ListNode *p= head,*q= head;
        if(head==NULL)
            return false;
       while(p){
           p=p->next;
           if(q->next && q->next->next)
               q=q->next->next;
           else
               return false;
           if(p==q)
               return true;
       }
      return false;      
        
    }




